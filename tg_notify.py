import asyncio
import logging
from datetime import datetime
import os

import aiohttp
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import CommandStart

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –±—Ä–∞—Ç—å—Å—è –∏–∑ "Environment Variables" –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ

# 1. –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")

# 2. ID –≤–∞—à–µ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞
# –ú—ã –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —á–∏—Å–ª–æ, —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è - —ç—Ç–æ –≤—Å–µ–≥–¥–∞ —Ç–µ–∫—Å—Ç
TELEGRAM_CHAT_ID = int(os.environ.get("TELEGRAM_CHAT_ID"))

# 3. –í–∞—à–∏ –∫–ª—é—á–∏ –æ—Ç Twitch
TWITCH_CLIENT_ID = os.environ.get("TWITCH_CLIENT_ID")
TWITCH_CLIENT_SECRET = os.environ.get("TWITCH_CLIENT_SECRET")

# 4. –°–ø–∏—Å–æ–∫ –Ω–∏–∫–Ω–µ–π–º–æ–≤ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ Twitch –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
# –ú—ã –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É "nick1,nick2,nick3" –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –µ–µ –≤ —Å–ø–∏—Å–æ–∫
TWITCH_CHANNELS = [name.strip() for name in os.environ.get("TWITCH_CHANNELS").split(',')]

# --- –ö–æ–Ω–µ—Ü –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Twitch API ---

async def get_twitch_token():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Twitch API."""
    global twitch_access_token
    url = f"https://id.twitch.tv/oauth2/token?client_id={TWITCH_CLIENT_ID}&client_secret={TWITCH_CLIENT_SECRET}&grant_type=client_credentials"
    async with aiohttp.ClientSession() as session:
        async with session.post(url) as response:
            if response.status == 200:
                data = await response.json()
                twitch_access_token = data['access_token']
                logging.info("–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ Twitch —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Twitch: {response.status} - {await response.text()}")
                twitch_access_token = None

async def check_twitch_streams():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã —Å—Ç—Ä–∏–º–æ–≤ –Ω–∞ Twitch."""
    if not twitch_access_token:
        logging.warning("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ Twitch. –ü—Ä–æ–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É.")
        await get_twitch_token() # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —Å–Ω–æ–≤–∞
        if not twitch_access_token:
            return

    headers = {
        "Client-ID": TWITCH_CLIENT_ID,
        "Authorization": f"Bearer {twitch_access_token}",
    }
    
    user_logins = "&".join([f"user_login={name}" for name in TWITCH_CHANNELS])
    url = f"https://api.twitch.tv/helix/streams?{user_logins}"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    current_online = {stream['user_login'].lower(): stream for stream in data.get('data', [])}
                    
                    for channel_login, stream_data in current_online.items():
                        if channel_login not in online_streams:
                            logging.info(f"{channel_login} –≤—ã—à–µ–ª –≤ –æ–Ω–ª–∞–π–Ω!")
                            online_streams[channel_login] = stream_data['id']
                            await send_notification(stream_data)

                    for channel_login in list(online_streams.keys()):
                        if channel_login not in current_online:
                            logging.info(f"{channel_login} –∑–∞–∫–æ–Ω—á–∏–ª —Å—Ç—Ä–∏–º.")
                            del online_streams[channel_login]

                elif response.status == 401:
                    logging.warning("–¢–æ–∫–µ–Ω Twitch –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –Ω–æ–≤—ã–π.")
                    await get_twitch_token()
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Twitch API: {response.status} - {await response.text()}")
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä–∏–º–æ–≤: {e}")

async def send_notification(stream_data):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram."""
    user_name = stream_data.get('user_name')
    title = stream_data.get('title')
    game_name = stream_data.get('game_name', 'N/A')
    thumbnail_url = stream_data.get('thumbnail_url').replace('{width}', '1280').replace('{height}', '720')
    
    thumbnail_url_with_ts = f"{thumbnail_url}?timestamp={int(datetime.now().timestamp())}"

    message_text = (
        f"üî¥ **{user_name} –≤ —ç—Ñ–∏—Ä–µ!**\n\n"
        f"**–°—Ç—Ä–∏–º:** {title}\n"
        f"**–ò–≥—Ä–∞:** {game_name}\n\n"
        f"https://www.twitch.tv/{stream_data.get('user_login')}"
    )

    try:
        await bot.send_photo(
            chat_id=TELEGRAM_CHAT_ID,
            photo=thumbnail_url_with_ts,
            caption=message_text,
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {user_name}: {e}")


# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏ –∑–∞–ø—É—Å–∫ ---

async def scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥."""
    while True:
        await check_twitch_streams()
        await asyncio.sleep(60)

@dp.message(CommandStart())
async def send_welcome(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç—Ä–∏–º–∞—Ö. –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.")

async def main():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await get_twitch_token()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(scheduler())
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())